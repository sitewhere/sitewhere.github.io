(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{178:function(e,t,n){"use strict";n.r(t);var a=n(1),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[e._v("The transition from a monilithic architecture to one based on microservices is\na key feature of the SiteWhere 2.0 architecture. Each microservice handles a\nspecific subset of functionality that is clearly defined and delineated from\nthe work done by other microservices. This allows parts of the system to be scaled\nindependently while allowing some pieces to be left out completely if not used. The\nmicroservices approach also decouples the code so that it is easier to understand\nand manage from a development perspective. The diagram below shows the microservices\nand the general flow of data between them:")]),e._v(" "),n("InlineImage",{attrs:{src:"/images/platform/microservices-diagram.png",caption:"Microservices"}}),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("SiteWhere microservices make a few assumptions about the underlying infrastructure\nthat they are running on. At a minimum, instances of Apache ZooKeeper\nand Apache Kafka must be available in order for the system to function properly.\nBy default, SiteWhere also produces distributed tracing data via the\n"),n("a",{attrs:{href:"http://opentracing.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("open tracing"),n("OutboundLink")],1),e._v(" standard for runtime performance analysis.\nA server backend that supports the API may be configured to store and analyze the data.")]),e._v(" "),e._m(2),e._v(" "),n("p",[e._v("When launching from Docker Compose or Swarm, there are\n"),n("a",{attrs:{href:"https://github.com/sitewhere/sitewhere-recipes",target:"_blank",rel:"noopener noreferrer"}},[e._v("recipes"),n("OutboundLink")],1),e._v(" available that\nmay be used to provide the expected infrastructure components. The recipes include\nthe required components such as ZooKeeper and Kafka as well as other supporting components\nsuch as "),n("a",{attrs:{href:"https://github.com/jaegertracing/jaeger",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jaeger"),n("OutboundLink")],1),e._v(" for tracing support\nand "),n("a",{attrs:{href:"https://github.com/elkozmon/zoonavigator",target:"_blank",rel:"noopener noreferrer"}},[e._v("ZooNavigator"),n("OutboundLink")],1),e._v(" for introspecting\nthe ZooKeeper store.")]),e._v(" "),e._m(3),e._v(" "),n("p",[e._v("In a production scenario, ZooKeeper and Kafka should be configured outside\nof Docker and properly scaled to account for fault tolerance and availability.\nThe SiteWhere team will offer more details about best practices as we approach\nthe 2.0 GA release.")]),e._v(" "),e._m(4),e._v(" "),n("p",[e._v("Each microservice is packaged as a Spring Boot application and deployed as an\nindependent Docker image. Since each microservice runs in a separate Docker container,\neach accounts for a separate Java process as opposed to all services running within\nthe same process in 1.x.")]),e._v(" "),e._m(5),e._v(" "),n("p",[e._v("SiteWhere 2.0 currently uses around 20 microservices, so the underlying hardware should be\nable to support running 20 concurrent Java processes, each with a footprint of around\n750MB. As such, the hardware requirements for 2.0 are higher than 1.x, though most\nmodern desktop computers can easily run a complete system. The intent for SiteWhere 2.0\nis to make use of orchestration engines such as Docker Swarm to distribute the microservices\nacross a cluster of machines, which lowers the hardware requirements for a single node.\nIn the end, though SiteWhere 2.0 has a larger footprint, the architecture supports\nmuch more scalable systems that can leverage large clusters of hardware and scale dynamically.")]),e._v(" "),e._m(6),e._v(" "),n("p",[e._v("Microservices do not operate in a vacuum and, as such, a high-performance RPC mechanism\nis needed to allow the services to communicate. SiteWhere leverages "),n("a",{attrs:{href:"https://grpc.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("gRPC"),n("OutboundLink")],1),e._v("\nfor moving data between microservices and offering performant binary APIs to external consumers.\nAll API calls and data entities have been made available to gRPC via the Google\nProtocol Buffers data format. Using gRPC rather than REST for communication can increase API\nperformance by more than 10x.")]),e._v(" "),e._m(7),e._v(" "),n("p",[e._v("Connections between microservices are not always one-to-one. For instance, if a SiteWhere instance\nhas a single Web/REST microservice and three instances of the Device Management microservice, the\nREST microservice should be able to demultiplex calls across all three Device Management instances\nfor scalability and fault tolerance. SiteWhere 2.0 introduces the concept of an API demulitplexor\nwhich is able to introspect the current instance topology and add/remove connections to other\nmicroservices dynamically. As the number of services is scaled up/down SiteWhere automatically\nconnects/disconnects the piping between them. All inter-microservice communication happens via\nthis mechanism.")]),e._v(" "),e._m(8),e._v(" "),n("p",[e._v("Even with the high performance of gRPC, requesting commonly used data repeatedly across\nthe network connection has a significant cost. Master information for entites such as devices,\nassignments, and assets is rarely updated and may be cached within an in-memory data grid\nrather than incurring the cost of reading from the database. SiteWhere 2.0 uses a Hazelcast in-memory\ngrid to provide a distributed cache of a subset of master data. This cache is queried before\nfalling back to a database request.")]),e._v(" "),e._m(9),e._v(" "),n("p",[e._v("Below is a list of the core microservices included in SiteWhere 2.0. Each service handles\na specific area of system functionality and is independent of other microservices in terms of\nruntime processing, data storage and configuration. Some microservices do, however, have\ndependencies on the APIs offered by other services and can not run in isolation. Below is a\nhigh-level overview of the individual services along with links to more detailed\nexplanations of each service.")]),e._v(" "),e._m(10),e._v(" "),n("p",[e._v("The instance management microservice is used to bootstrap a SiteWhere instance with\nthe initial Zookeeper configuration structure required by the other microservices.\nAll other microservices wait for the Zookeeper data to be initialized before\nstarting, so the instance management microservice must be present in an uninitialized\nSiteWhere instance or all other microservices will fail to start.")]),e._v(" "),n("p",[e._v("See the instance management "),n("router-link",{attrs:{to:"./../guide/microservices/instance-management.html"}},[e._v("guide")]),e._v("\nfor more details.")],1),e._v(" "),e._m(11),e._v(" "),n("p",[e._v("The global user management microservice provides the core APIs and data persistence used\nto manage system users. It is initially used by the instance management microservice\nto bootstrap the system with base users. Afterward, it is called by the Web/REST\nmicroservice to allow the list of users to be managed.")]),e._v(" "),e._m(12),e._v(" "),n("p",[e._v("The global tenant management microservice provides the core APIs and data persistence for\nmanaging system tenants. It is initially used by the instance management microservice\nto bootstrap the system with base tenants. Afterward, it is called by the Web/REST\nmicroservice to allow the list of system tenants to be managed.")]),e._v(" "),n("p",[e._v("When a tenant is added/updated/deleted, the tenant data is pushed to a Kafka topic\nso that other interested listeners can act on the update. By default, a listener is\nregistered to boostrap newly created tenants by adding the expected tenant configuration\nhierarchy in ZooKeeper. This process includes copying the per-microservice XML configuration\nfiles from the tenant template into ZooKeeper, then executing the list of initialization\nscripts included with the template. Once this process is complete, the tenant configuration\nis marked as boostrapped so that other microservices can react to the added tenant. For\ninstance, the device management microservice will notice that a new tenant has been configured\nand will wait for the bootstrapped indicator, then will load the device-management.xml\nconfiguration file to initialize a new device management tenant engine for the added tenant.\nAny time that files within a tenant are changed, the changes are broadcast to tenant engines\nrunning on all other microservices so they can react to the changes. In the previous example,\nif multiple device management microservices are running (scale > 1), each microservice will\ndetect the updates and reload the tenant engines to reflect the updates.")]),e._v(" "),e._m(13),e._v(" "),n("p",[e._v("The global Web/REST microservice includes a Tomcat container that provides\ninfrastructure for all of the core REST services (including Swagger user\ninterfaces). This microservice is usually connected to all other microservices in the\nsystem so that API calls may be delegated to the microservices that implement\nthe functionality. For instance, querying for a device via the REST APIs\nresults in a gRPC request (potentially cached via Hazelcast) to the appropriate\ndevice management tenant engine on one of the device management microservices.")]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("p",[e._v('The multitenant device management microservice provides the core APIs and data persistence\nfor managing the device model (sites, specifications, devices, groups, etc.) for each tenant\nin a SiteWhere instance. The device model is initially populated based on the scripts included\nin the tenant template used when creating the tenant. For instance, the "Construction" template\nwill populate the data model with devices appropriate for a construction site. If using the\n"Empty" template, no device management data will be populated.')]),e._v(" "),e._m(16),e._v(" "),n("p",[e._v('The multitenant event management microservice provides the core APIs and data persistence\nfor managing device events (locations, measurements, alerts, command invocations, etc) for\neach tenant in a SiteWhere instance. The device event model is initially populated based on\nthe scripts included in the tenant template used when creating the tenant. For instance, the\n"Construction" template populates example location, measurement and alert data relevant to\nmachines at a construction site. If using the "Empty" template, no event management data\nwill be populated.')]),e._v(" "),e._m(17),e._v(" "),n("p",[e._v('The multitenant asset management microservice provides the core APIs and data persistence\nfor managing assets for each tenant in a SiteWhere instance. The asset model is initially\npopulated based on the scripts included in the tenant template used when creating the tenant.\nFor instance, the "Construction" template populates assets such as heavy equipment, storage\ntrailers, and various types of tracking devices. If using the "Empty" template, no asset\nmanagement data will be populated.')]),e._v(" "),e._m(18),e._v(" "),n("p",[e._v('The multitenant schedule management microservice provides the core APIs and data persistence\nfor managing schedules for each tenant in a SiteWhere instance. The schedule model is initially\npopulated based on the scripts included in the tenant template used when creating the tenant.\nMost tenant templates include a few example schedules. If using the "Empty" template, no schedule\nmanagement data will be populated.')]),e._v(" "),e._m(19),e._v(" "),n("p",[e._v("The multitenant batch operations microservice provides the core APIs and data persistence\nfor managing batch operations for each tenant in a SiteWhere instance. The batch operations\nmodel is empty upon tenant initialization, but may be populated by invoking APIs that\nproduce batch operations (such as batch command invocations).")]),e._v(" "),n("p",[e._v("Each batch operations tenant engine also contains a batch operation manager that may\nbe configured to process batch operations that are created via the APIs. The batch operation\nmanager will turn the batch request into many smaller operations to achieve the batch goal.")]),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),n("p",[e._v("The multitenant event sources microservice hosts tenant engines that may be configured\nto ingest data from many types of data producers. Some examples include consuming data\nfrom MQTT topics, CoAP requests, direct TCP/IP socket connections, WebSockets, REST calls\nvia push or pull models, and many other potential sources. After events are ingested,\nthey are decoded into a standardized data model and pushed to a tenant-specific Kafka\ntopic for further processing. Kafka topics are also registered for events that can not\nbe parsed or are detected as duplicates by deduplication processing.")]),e._v(" "),e._m(22),e._v(" "),n("p",[e._v("The multitenant inbound processing microservice ingests data that was produced by the\nevent sources microservice (after decoding and deduplication has completed). This microservice\nvalidates the inbound data by interacting with the device management microservice to\nverify that the inbound event relates to a registered device. The inbound payload is enriched\nwith device/assignment data so the information may be used by subsequent processing steps\nwithout the need to look it up again. If the device is not registered, the payload is\npassed to the device registration microservice for additional processing. If the device becomes\nregistered as a result, the event is pushed onto a re-processing topic so that it may be\nprocessed again with the newly registered device.")]),e._v(" "),n("p",[e._v("Once the inbound event has been enriched, it is forwarded to the event management\nmicroservice for persistence. The persisted event is eventually (asynchronously) returned\nto inbound processing where it is added to a topic for pre-processed events that may\nin turn be consumed by other microservices such a rule processing and outbound\nconnectors.")]),e._v(" "),e._m(23),e._v(" "),n("p",[e._v("The multitenant device registration microservice ingests data from a Kafka topic\npopulated by the inbound processing microservice when events reference a hardware id\nfor a device that is not currently registered in the system. Each tenant engine has\na device registration manager which may be configured to indicate how unregistered\ndevices are to be treated. The device registration manager processes each inbound\nevent and can potentially register the device automatically before adding the event\nto a re-processing topic to have it processed by the inbound processing microservice.")]),e._v(" "),n("p",[e._v('Events that do not result in auto-registration of a device are pushed to a "dead letter"\ntopic in Kafka so that they can be tracked or processed out-of-band by external processors.')]),e._v(" "),e._m(24),e._v(" "),n("p",[e._v("The multitenant rule processing microservice ingests data from the Kafka topic containing\npre-processed events and applies conditional logic to further process the events. Tenant engines\ncan use embedded complex event processing (WSO2 Siddhi) to detect patterns in the event\nstream and fire new events as the result.")]),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),n("p",[e._v("The multitenant command delivery microservice ingests data from the Kafka topic containing\npre-processed events and, for command invocations, handles command processing. This includes\nusing configured routing constraints and command destinations that indicate how the command\nis to be encoded, which transport is to be used, and where the command is to be delivered.")]),e._v(" "),e._m(27),e._v(" "),n("p",[e._v("The multitenant outbound connectors microservice ingests data from the Kafka topic containing\npre-processed events and allows the event data to be forwarded to other integration points\nasynchronously. Each outbound connector is a Kafka consumer that has its own pointer into\nthe events topic, so the system is not blocked by connectors that occasionally process at\nslower rates than the rest of the system. Connectors are available for common use cases such\nas forwarding events to a well-known MQTT topic or indexing events in Apache Solr.")]),e._v(" "),e._m(28),e._v(" "),n("p",[e._v("The multitenant presence management microservice ingests data from the Kafka topic containing\npre-processed events and uses the event data to update device presence state. Each tenant engine\nhas a device presence manager that is responsible for determining when devices are no longer\npresent and firing state change events that can be used to trigger actions based on a device\nbecoming present or not present.")]),e._v(" "),e._m(29),e._v(" "),n("p",[e._v("The multitenant label generation microservice responds to API requests for label resources such\nas QR codes, bar codes, or custom device labels. Each tenant engine has a symbol generation\nmanager that may be customized to generate specific types of output unique to the tenant.")]),e._v(" "),e._m(30),e._v(" "),n("p",[e._v("The multitenant event search microservice provides an API for searching external data sources\nthat contain SiteWhere event information in a non-standard format. For instance, when events\nare indexed into Apache Solr via an outbound connector, there may be a need to query Solr directly\nto do complex faceted queries that can not be generically supported via the SiteWhere APIs. The\ntenant engines for this microservice may be configured to proxy queries to the underlying service\nand return the results to the Web/REST microservice for use by external clients.")]),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),n("p",[e._v("The multitenant streaming media microservice is intended to allow streaming storage of binary\ndata such as audio and video streams. Some basic APIs for streaming were available in SiteWhere 1.x,\nbut were not documented or considered production quality. SiteWhere 2.0 will formalize the\nstreaming media APIs, though integration with various encoding/decoding technologies may\nextend beyond the 2.0 GA release cycle.")]),e._v(" "),e._m(33)],1)}),[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"microservices-overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#microservices-overview","aria-hidden":"true"}},[this._v("#")]),this._v(" Microservices Overview")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"infrastructure-components"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure-components","aria-hidden":"true"}},[this._v("#")]),this._v(" Infrastructure Components")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"infrastructure-recipes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure-recipes","aria-hidden":"true"}},[this._v("#")]),this._v(" Infrastructure Recipes")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"production-deployments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#production-deployments","aria-hidden":"true"}},[this._v("#")]),this._v(" Production Deployments")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"microservice-deployment-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#microservice-deployment-model","aria-hidden":"true"}},[this._v("#")]),this._v(" Microservice Deployment Model")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"system-resource-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#system-resource-usage","aria-hidden":"true"}},[this._v("#")]),this._v(" System Resource Usage")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"inter-microservice-connectivity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inter-microservice-connectivity","aria-hidden":"true"}},[this._v("#")]),this._v(" Inter-Microservice Connectivity")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"api-demultiplexors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-demultiplexors","aria-hidden":"true"}},[this._v("#")]),this._v(" API Demultiplexors")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"distributed-cache-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#distributed-cache-support","aria-hidden":"true"}},[this._v("#")]),this._v(" Distributed Cache Support")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"list-of-core-microservices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-of-core-microservices","aria-hidden":"true"}},[this._v("#")]),this._v(" List of Core Microservices")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"instance-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instance-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Instance Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"user-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user-management","aria-hidden":"true"}},[this._v("#")]),this._v(" User Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"tenant-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tenant-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Tenant Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"web-rest"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-rest","aria-hidden":"true"}},[this._v("#")]),this._v(" Web/REST")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("There may be cases where the microservice required to complete a request is not available.\nIn this case, a "),t("em",[this._v("ServiceNotAvailable")]),this._v(" exception is thrown and passed back as an error to\nthe user/application that made the request. Using this approach, areas of the system may\nbe shut down to conserve resources while not affecting the functionality if the system as\na whole. Callers to the REST services should be prepared to handle cases where the\nsubsystem they are calling may be shut down.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"device-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#device-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Device Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"event-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#event-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Event Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"asset-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asset-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Asset Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"schedule-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#schedule-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Schedule Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"batch-operations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#batch-operations","aria-hidden":"true"}},[this._v("#")]),this._v(" Batch Operations")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),t("p",[this._v("This microservice is not fully implemented in 2.0")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"event-sources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#event-sources","aria-hidden":"true"}},[this._v("#")]),this._v(" Event Sources")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"inbound-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inbound-processing","aria-hidden":"true"}},[this._v("#")]),this._v(" Inbound Processing")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"device-registration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#device-registration","aria-hidden":"true"}},[this._v("#")]),this._v(" Device Registration")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"rule-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rule-processing","aria-hidden":"true"}},[this._v("#")]),this._v(" Rule Processing")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),t("p",[this._v("This microservice is not fully implemented in 2.0")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"command-delivery"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#command-delivery","aria-hidden":"true"}},[this._v("#")]),this._v(" Command Delivery")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"outbound-connectors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#outbound-connectors","aria-hidden":"true"}},[this._v("#")]),this._v(" Outbound Connectors")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"presence-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#presence-management","aria-hidden":"true"}},[this._v("#")]),this._v(" Presence Management")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"label-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#label-generation","aria-hidden":"true"}},[this._v("#")]),this._v(" Label Generation")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"event-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#event-search","aria-hidden":"true"}},[this._v("#")]),this._v(" Event Search")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),t("p",[this._v("This microservice is not fully implemented in 2.0")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"streaming-media"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streaming-media","aria-hidden":"true"}},[this._v("#")]),this._v(" Streaming Media")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),t("p",[this._v("This microservice is not fully implemented in 2.0")])])}],!1,null,null,null);i.options.__file="microservice-overview.md";t.default=i.exports}}]);