<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema
	xmlns="http://sitewhere.io/schema/sitewhere/microservice/outbound-connectors"
	xmlns:cn="http://sitewhere.io/schema/sitewhere/microservice/common/connector"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://sitewhere.io/schema/sitewhere/microservice/outbound-connectors"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import
		namespace="http://sitewhere.io/schema/sitewhere/microservice/common/connector"
		schemaLocation="http://sitewhere.io/schema/sitewhere/microservice/common/current/connector-common.xsd" />

	<xsd:element name="outbound-connectors"
		type="outboundConnectorsType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for the
				SiteWhere outbound connectors microservice.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Contains information about outbound connectors -->
	<xsd:complexType name="outboundConnectorsType">
		<xsd:sequence>
			<xsd:element ref="abstract-outbound-connector"
				minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound connector filter elements to allow 
		substitutionGroups -->
	<xsd:element name="abstract-outbound-connector-filter"
		abstract="true" type="abstractOutboundConnectorFilterType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound connector filter
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common outbound connector filter element information -->
	<xsd:complexType
		name="abstractOutboundConnectorFilterType" />

	<!-- Filter operation type -->
	<xsd:simpleType name="filterOperationType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="include" />
			<xsd:enumeration value="exclude" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Filters outbound events associated with a site -->
	<xsd:element name="site-filter" type="siteFilterType"
		substitutionGroup="abstract-outbound-connector-filter">
		<xsd:annotation>
			<xsd:documentation>
				Includes or excludes device events depending on
				whether the device
				is associated with a given site.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siteFilterType">
		<xsd:complexContent>
			<xsd:extension
				base="abstractOutboundConnectorFilterType">
				<xsd:attribute name="site" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique token for the site to be filtered.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="operation"
					type="filterOperationType" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Indicates whether matches should be included or
							excluded from the
							result set.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Filters outbound events associated with a device specification -->
	<xsd:element name="specification-filter"
		type="specificationFilterType"
		substitutionGroup="abstract-outbound-connector-filter">
		<xsd:annotation>
			<xsd:documentation>
				Includes or excludes device events depending on
				whether the device
				is based on a given specififation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="specificationFilterType">
		<xsd:complexContent>
			<xsd:extension
				base="abstractOutboundConnectorFilterType">
				<xsd:attribute name="specification" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique token for the specification to be
							filtered.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="operation"
					type="filterOperationType" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Indicates whether matches should be included or
							excluded from the
							result set.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Chooses events to filter based on a Groovy script -->
	<xsd:element name="groovy-filter" type="groovyFilterType"
		substitutionGroup="abstract-outbound-connector-filter">
		<xsd:annotation>
			<xsd:documentation>
				Executes a Groovy script which should return a
				boolean result. True
				indicates the event is to be included in the
				result set, false indicates it should be
				filtered.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyFilterType">
		<xsd:complexContent>
			<xsd:extension
				base="abstractOutboundConnectorFilterType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Script that determines whether events are
							included or filtered.
							The script should return true if the event
							is to be included or false if the event
							is to be filtered.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Element that contains a list of outbound connector filters -->
	<xsd:complexType name="outboundConnectorFilterList">
		<xsd:sequence>
			<xsd:element ref="abstract-outbound-connector-filter"
				minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound multicaster elements to allow substitutionGroups -->
	<xsd:element name="abstract-outbound-multicaster"
		abstract="true" type="abstractOutboundMulticasterType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound multicaster elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common multicaster element information -->
	<xsd:complexType name="abstractOutboundMulticasterType" />

	<!-- Multicasts events to all devices that use a given specification -->
	<xsd:element name="all-with-specification-multicaster"
		type="allWithSpecificationMulticasterType"
		substitutionGroup="abstract-outbound-multicaster">
		<xsd:annotation>
			<xsd:documentation>
				Multicasts to all devices that use a given
				specification.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType
		name="allWithSpecificationMulticasterType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundMulticasterType">
				<xsd:attribute name="specification" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique token for device specification.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that returns a String
							value indicating
							the calculated route or null if event should not
							be routed.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound route builder elements to allow 
		substitutionGroups -->
	<xsd:element name="abstract-outbound-route-builder"
		abstract="true" type="abstractOutboundRouteBuilderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound route builder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common route builder element information -->
	<xsd:complexType
		name="abstractOutboundRouteBuilderType" />

	<!-- Routes events based on results from a Groovy script -->
	<xsd:element name="groovy-route-builder"
		type="groovyRouteBuilderType"
		substitutionGroup="abstract-outbound-route-builder">
		<xsd:annotation>
			<xsd:documentation>
				Uses Groovy script to build outbound route.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyRouteBuilderType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundRouteBuilderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that returns a String
							value indicating
							the calculated route.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound connector elements to allow substitutionGroups -->
	<xsd:element name="abstract-outbound-connector"
		abstract="true" type="abstractOutboundConnectorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound connector elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common outbound connector element information -->
	<xsd:complexType name="abstractOutboundConnectorType">
		<xsd:attributeGroup
			ref="outbound-connector-attributes" />
	</xsd:complexType>

	<!-- Attributes common to all outbound connectors -->
	<xsd:attributeGroup
		name="outbound-connector-attributes">
		<xsd:attribute name="connectorId" type="xsd:token"
			use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for outbound connector.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="numProcessingThreads"
			type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>
					Number of processing threads used to pull events
					from Kafka and into outbound connector.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Adds ability to add nested filters for outbound connectors -->
	<xsd:complexType name="filteredOutboundConnectorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundConnectorType">
				<xsd:sequence>
					<xsd:element name="filters"
						type="outboundConnectorFilterList" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								List of filters that will be applied to
								outbound traffic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="outboundConnectorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- MQTT outbound connector -->
	<xsd:element name="mqtt-connector" type="mqttConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to an MQTT topic.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:sequence>
					<xsd:element ref="abstract-outbound-multicaster"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows a multicaster to be configured so that
								events can be
								broadcast to many different topics.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="abstract-outbound-route-builder"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows customization of route building logic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attributeGroup
					ref="cn:mqtt-broker-attributes" />
				<xsd:attribute name="topic" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							MQTT topic used if no multicaster or route
							builder is configured.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- RabbitMQ outbound event connector -->
	<xsd:element name="rabbit-mq-connector"
		type="rabbitMqConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to a RabbitMQ exchange.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="rabbitMqConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:sequence>
					<xsd:element ref="abstract-outbound-multicaster"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows a multicaster to be configured so that
								events can be
								broadcast to many different exchanges.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="abstract-outbound-route-builder"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows customization of route building logic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="connectionUri" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							URI that provides information about the
							RabbitMQ instance to
							connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="topic" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Name of topic to publish to if route builder is
							not
							configured.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Groovy outbound event connector -->
	<xsd:element name="groovy-connector"
		type="groovyConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Delegates event processing to a Groovy script. The
				script can apply conditional logic or interact with SiteWhere
				interfaces to create new events or perform other tasks.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for processing each event.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Solr outbound connector -->
	<xsd:element name="solr-connector" type="solrConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to Apache Solr for indexing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:sequence>
					<xsd:element ref="cn:solr-configuration-choice" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Azure EventHub outbound connector -->
	<xsd:element name="azure-eventhub-connector"
		type="azureEventHubConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to an Azure EventHub using
				AMQP 1.0.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="azureEventHubConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:attribute name="sasName" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Sets the identity used for SAS authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="sasKey" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Sets the key used for SAS authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="serviceBusName" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Set the service bus to connect to (e.g.
							xxx.servicebus.windows.net).
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="eventHubName" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of EventHub to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- InitialState.com outbound connector -->
	<xsd:element name="initial-state-connector"
		type="initialStateConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends events to the InitialState.com cloud service
				where they can be
				viewed in a customized dashboard.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="initialStateConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:attribute name="streamingAccessKey"
					type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Access key obtained from the InitialState.com
							website that
							specifies the account that the events will be
							associated with.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Dweet.io outbound connector -->
	<xsd:element name="dweet-io-connector"
		type="dweetIoConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends events to the Dweet.io cloud service where
				they can be viewed
				and integrated with other services.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="dweetIoConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Amazon SQS outbound connector -->
	<xsd:element name="amazon-sqs-connector"
		type="amazonSqsConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Forwards outbound events to Amazon SQS.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="amazonSqsConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:attribute name="accessKey" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Amazon AWS access key for account owning SQS
							queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="secretKey" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Amazon AWS secret key for account owning SQS
							queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueUrl" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique URL for SQS queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- WSO2 CEP connector -->
	<xsd:element name="wso2-cep-connector"
		type="wso2CepConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Sends events to streams on an external WSO2 CEP
				instance for
				processing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="wso2CepConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:attribute name="hostname" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Hostname for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="port" type="xsd:int"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Port number for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="username" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Username for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="password" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Password for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Siddhi CEP outbound connector -->
	<xsd:element name="siddhi-connector"
		type="siddhiConnectorType"
		substitutionGroup="abstract-outbound-connector">
		<xsd:annotation>
			<xsd:documentation>
				Processes events through an embedded Siddhi
				instance to allow
				complex event processing (CEP) funcitonality.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siddhiConnectorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundConnectorType">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded"
						name="siddhi-query" type="siddhiQueryType">
						<xsd:annotation>
							<xsd:documentation>
								A Siddhi query that executes selector logic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for Siddhi callbacks to allow substitutionGroups -->
	<xsd:element name="abstract-siddhi-callback"
		abstract="true" type="abstractSiddhiCallbackType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for Siddhi callback elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common Siddhi callback element information -->
	<xsd:complexType name="abstractSiddhiCallbackType">
		<xsd:attribute name="stream" type="xsd:string"
			use="required">
			<xsd:annotation>
				<xsd:documentation>
					Name of stream for which a callback will be
					registered.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Siddhi debug callback -->
	<xsd:element name="stream-debugger"
		type="siddhiStreamDebuggerType"
		substitutionGroup="abstract-siddhi-callback">
		<xsd:annotation>
			<xsd:documentation>
				Debugs Siddhi streams by printing events to the
				log.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siddhiStreamDebuggerType">
		<xsd:complexContent>
			<xsd:extension base="abstractSiddhiCallbackType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Siddhi Groovy stream processor -->
	<xsd:element name="groovy-stream-processor"
		type="siddhiGroovyStreamProcessorType"
		substitutionGroup="abstract-siddhi-callback">
		<xsd:annotation>
			<xsd:documentation>
				Processes events from a Siddhi stream using a
				Groovy script.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siddhiGroovyStreamProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractSiddhiCallbackType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for processing each event.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="siddhiQueryType">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded"
				ref="abstract-siddhi-callback" />
		</xsd:sequence>
		<xsd:attribute name="selector" type="xsd:string"
			use="required">
			<xsd:annotation>
				<xsd:documentation>
					Selector expression that contains processing
					logic.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
</xsd:schema>