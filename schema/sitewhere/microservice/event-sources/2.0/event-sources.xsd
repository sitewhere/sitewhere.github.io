<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema
	xmlns="http://sitewhere.io/schema/sitewhere/microservice/event-sources"
	xmlns:sw="http://sitewhere.io/schema/sitewhere/microservice/common"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://sitewhere.io/schema/sitewhere/microservice/event-sources"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://sitewhere.io/schema/sitewhere/microservice/common"
		schemaLocation="http://sitewhere.io/schema/sitewhere/microservice/common/current/microservice-common.xsd" />

	<xsd:element name="event-sources" type="eventSourcesType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for the
				SiteWhere event sources microservice.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Contains information about inbound event sources -->
	<xsd:complexType name="eventSourcesType">
		<xsd:sequence>
			<xsd:element ref="abstract-event-source" minOccurs="0"
				maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for decoders to allow substitutionGroups -->
	<xsd:element name="abstract-decoder" abstract="true"
		type="abstractDecoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for decoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common decoder information -->
	<xsd:complexType name="abstractDecoderType" />

	<!-- Reference to an event decoder defined as a Spring bean -->
	<xsd:element name="event-decoder" type="eventDecoderReferenceType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>References a decoder defined in an external bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventDecoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode using the standard SiteWhere Google Protocol Buffer definition -->
	<xsd:element name="protobuf-event-decoder" type="swProtobufDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that expects a message in the SiteWhere
				Google Protocol
				Buffer format.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode using the standard SiteWhere JSON device interaction representation -->
	<xsd:element name="json-device-request-decoder" type="swJsonDeviceRequestDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that parses requests from devices.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonDeviceRequestDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode using the standard SiteWhere JSON batch representation -->
	<xsd:element name="json-event-decoder" type="swJsonEventBatchDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>DEPRECATED: Use json-batch=event-decoder for JSON
				batch event
				processing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="json-batch-event-decoder" type="swJsonEventBatchDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that parses batches of device events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonEventBatchDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode binary payload using a Groovy script -->
	<xsd:element name="groovy-event-decoder" type="swGroovyDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that uses a Groovy script to parse a
				binary payload into
				decoded events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for decoding payload.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode String payload using a Groovy script -->
	<xsd:element name="groovy-string-event-decoder" type="swGroovyStringDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that uses a Groovy script to parse a
				String payload into
				decoded events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyStringDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for decoding payload.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Echo String payload for debugging purposes -->
	<xsd:element name="echo-string-decoder" type="swEchoStringDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder for event receivers with String payloads
				that simply echoes
				the payload to the log.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swEchoStringDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for device metadata extractors to allow substitutionGroups -->
	<xsd:element name="abstract-device-metadata-extractor"
		abstract="true" type="abstractDeviceMetadataExtractorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device metadata extractor
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common device metadata extractor information -->
	<xsd:complexType name="abstractDeviceMetadataExtractorType" />

	<!-- Groovy device metadata extractor -->
	<xsd:element name="groovy-device-metadata-extractor" type="swGroovyDeviceMetadataExtractorType"
		substitutionGroup="abstract-device-metadata-extractor">
		<xsd:annotation>
			<xsd:documentation>Uses a Groovy script to extract device/payload
				information from a message.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyDeviceMetadataExtractorType">
		<xsd:complexContent>
			<xsd:extension base="abstractDeviceMetadataExtractorType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that extracts metadata
							such as hardware id from the message.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for composite decoder choices to allow substitutionGroups -->
	<xsd:element name="abstract-decoder-choice" abstract="true"
		type="abstractCompositeDecoderChoiceType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder a choice available to a composite
				decoder.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common composite decoder choice information -->
	<xsd:complexType name="abstractCompositeDecoderChoiceType">
		<xsd:sequence>
			<xsd:element ref="abstract-decoder">
				<xsd:annotation>
					<xsd:documentation>Decoder used if choice criteria is met.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Composite decoder choice based on device specification -->
	<xsd:element name="device-specification-decoder-choice"
		type="swDeviceSpecificationDecoderChoiceType" substitutionGroup="abstract-decoder-choice">
		<xsd:annotation>
			<xsd:documentation>Uses device specification token as the criteria
				for choosing the associated decoder.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swDeviceSpecificationDecoderChoiceType">
		<xsd:complexContent>
			<xsd:extension base="abstractCompositeDecoderChoiceType">
				<xsd:attribute name="token" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Token for device specification to match.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- List of choices for a composite event decoder -->
	<xsd:complexType name="swCompositeDecoderChoicesType">
		<xsd:sequence>
			<xsd:element ref="abstract-decoder-choice" minOccurs="0"
				maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Decoder that extracts metadata and delegates to sub-decoders -->
	<xsd:element name="composite-decoder" type="swCompositeDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that extracts metadata from the initial
				message in order to determine which of a list of sub-decoders should
				be used to decode the message.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swCompositeDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:all>
					<xsd:element ref="abstract-device-metadata-extractor" />
					<xsd:element name="choices" type="swCompositeDecoderChoicesType"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								List of choices available for the composite
								decoder.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:all>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for deduplicators to allow substitutionGroups -->
	<xsd:element name="abstract-deduplicator" abstract="true"
		type="abstractDeduplicatorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for deduplicator elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common deduplicator information -->
	<xsd:complexType name="abstractDeduplicatorType" />

	<!-- Deduplicate events using a Groovy script -->
	<xsd:element name="groovy-event-deduplicator" type="swGroovyDeduplicatorType"
		substitutionGroup="abstract-deduplicator">
		<xsd:annotation>
			<xsd:documentation>Event deduplicator that uses a Groovy script to
				determine whether an event is a duplicate of an existing event.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyDeduplicatorType">
		<xsd:complexContent>
			<xsd:extension base="abstractDeduplicatorType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for deduplicating event.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Deduplicate events by checking for event alternate id in datastore -->
	<xsd:element name="alternate-id-deduplicator" type="swAlternateIdDeduplicatorType"
		substitutionGroup="abstract-deduplicator">
		<xsd:annotation>
			<xsd:documentation>Event deduplicator that checks the alternate id
				(if present) in an event against the existing list of alternate ids
				in the datastore.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swAlternateIdDeduplicatorType">
		<xsd:complexContent>
			<xsd:extension base="abstractDeduplicatorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for event sources to allow substitutionGroups -->
	<xsd:element name="abstract-event-source" abstract="true"
		type="abstractEventSourceType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for event source elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common event source information -->
	<xsd:complexType name="abstractEventSourceType">
		<xsd:sequence>
			<xsd:element ref="abstract-decoder" minOccurs="1"
				maxOccurs="1" />
			<xsd:element ref="abstract-deduplicator" minOccurs="0"
				maxOccurs="1" />
		</xsd:sequence>
		<xsd:attributeGroup ref="event-source-attributes" />
	</xsd:complexType>

	<!-- Attributes common to all event sources -->
	<xsd:attributeGroup name="event-source-attributes">
		<xsd:attribute name="sourceId" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for event source.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Reference to an event source defined in Spring beans -->
	<xsd:element name="event-source" type="eventSourceReferenceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source defined externally as a Spring bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventSourceReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="mqtt-event-source" type="mqttEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an
				MQTT topic and decodes it
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attributeGroup ref="sw:mqtt-broker-attributes" />
				<xsd:attribute name="topic" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							MQTT topic used to deliver inbound events.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls binary information from a RabbitMQ queue and 
		decodes it -->
	<xsd:element name="rabbit-mq-event-source" type="rabbitMqEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from a
				RabbitMQ queue and
				decodes it.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="rabbitMqEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="connectionUri" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							URI that provides information about the
							RabbitMQ instance to
							connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Name of RabbitMQ queue to be consumed.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="durable" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>
							Indicates whether the queue should survive
							broker restarts.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumer threads used to consume the
							queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls binary information from an EventHub endpoint 
		and decodes it -->
	<xsd:element name="azure-eventhub-event-source" type="azureEventhubEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an
				Azure EventHub
				endpoint and
				decodes it
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="azureEventhubEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attributeGroup ref="azure-eventhub-inbound-attributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Attributes used for inbound eventhub processing -->
	<xsd:attributeGroup name="azure-eventhub-inbound-attributes">
		<xsd:attribute name="targetFqn" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					EventHub targetFqn address.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="namespace" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					EventHub namespace.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="entityPath" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					EventHub entityPath.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="partitionCount" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>
					EventHub partition count.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="zkStateStore" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					zookeeper store url for EventHub state
					persistence.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="username" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					username for EventHub connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="password" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					password for EventHub connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Event source that creates an embedded ActiveMQ broker -->
	<xsd:element name="activemq-event-source" type="activemqEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that creates an embedded ActiveMQ
				broker and listens
				for messages on a transport specified by the
				transport URI.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="activemqEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="transportUri" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							URI used to configure the transport for the
							embedded ActiveMQ
							broker.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="dataDirectory" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Data directory used to store persistent message
							queues.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of JMS queue for consumers to pull
							messages from.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumers used to read data from the
							queue into
							SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that reads messages from a remote ActiveMQ source -->
	<xsd:element name="activemq-client-event-source" type="activeMQClientEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source connects to a remote broker and
				consumes messages from
				it.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="activeMQClientEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="remoteUri" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							URI of remote broker to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of JMS queue for consumers to pull
							messages from.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumers used to read data from the
							queue into
							SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls decoded events from a Hazelcast queue -->
	<xsd:element name="hazelcast-queue-event-source" type="hazelcastQueueEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls decoded events from a
				Hazelcast queue.
				Primarily used to allow one instance of SiteWhere to
				decode events and feed them to
				multiple subordinate instances for
				processing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastQueueEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that polls REST services for data -->
	<xsd:element name="polling-rest-event-source" type="pollingRestEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that supports connecting to REST
				services and parsing
				the response data with a Groovy script in order
				to generate event payloads.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="pollingRestEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="pollIntervalMs" type="xsd:int"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Interval (in milliseconds) to wait between
							polling requests.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic
							needed to generate REST request and parse response.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="baseUrl" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Base URL used for REST requests. Within Groovy
							script, any REST
							calls are assumed relative to this base value.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="username" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Username if REST services requires
							authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="password" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Password if REST services requires
							authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Reference to an interaction handler factory defined in a Spring bean -->
	<xsd:complexType name="interactionHandlerFactoryReferenceType">
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Bean that implements the
					ISocketInteractionHandler interface.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Reads all of the client data from the socket and returns a byte array -->
	<xsd:complexType name="readAllInteractionHandlerFactoryType">
	</xsd:complexType>

	<!-- Treats socket input as HTTP request and processes entity payload -->
	<xsd:complexType name="httpInteractionHandlerFactoryType">
	</xsd:complexType>

	<!-- Hands off socket interaction processing to a Groovy script -->
	<xsd:complexType name="groovyInteractionHandlerFactoryType">
		<xsd:attribute name="scriptPath" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Path to a Groovy script that handles socket
					interactions.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Event source that pulls binary information from a server socket and 
		decodes it -->
	<xsd:element name="socket-event-source" type="socketEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from
				connections to a
				TCP/IP server socket.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="socketEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="interaction-handler-factory"
							type="interactionHandlerFactoryReferenceType">
							<xsd:annotation>
								<xsd:documentation>Reference to an interaction handler factory
									defined in an
									external Spring bean. Factory must implement
									ISocketInteractionHandlerFactory
									interface.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="read-all-interaction-handler-factory"
							type="readAllInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that reads all content
									from the client
									socket and delivers it to the decoder as a byte
									array.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="http-interaction-handler-factory"
							type="httpInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that treats a socket
									request as an HTTP
									message and delivers the entity payload to
									the decoder as a byte array. A 200 OK
									response is sent back to
									the requestor.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="groovy-interaction-handler-factory"
							type="groovyInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that hands off socket
									interactions to a
									Groovy script.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="port" type="xsd:int" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Port on which the server socket will listen.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numThreads" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of threads used to handle client
							connections to the server
							socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains web socket header information -->
	<xsd:complexType name="webSocketHeaderType">
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Header name.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="value" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Header value.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Types of payloads that may be processed by a web socket event source -->
	<xsd:simpleType name="webSocketPayloadType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="binary" />
			<xsd:enumeration value="string" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Event source that pulls data from a web socket and decodes it -->
	<xsd:element name="web-socket-event-source" type="webSocketEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls data from a web socket.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="webSocketEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element name="header" type="webSocketHeaderType"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Header that is passed to the web socket for
								configuration.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="webSocketUrl" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							URL of the web socket to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="payloadType" type="webSocketPayloadType"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that accepts CoAP requests for SiteWhere resources -->
	<xsd:element name="coap-server-event-source" type="coapServerEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that accepts CoAP requests for
				SiteWhere resources.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="coapServerEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="hostname" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Hostname used when binding CoAP server socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="port" type="xsd:integer" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Port used when binding CoAP server socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
</xsd:schema>