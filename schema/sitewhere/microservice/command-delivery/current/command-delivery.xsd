<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema
	xmlns="http://sitewhere.io/schema/sitewhere/microservice/command-delivery"
	xmlns:cn="http://sitewhere.io/schema/sitewhere/microservice/common/connector"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://sitewhere.io/schema/sitewhere/microservice/command-delivery"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import
		namespace="http://sitewhere.io/schema/sitewhere/microservice/common/connector"
		schemaLocation="http://sitewhere.io/schema/sitewhere/microservice/common/current/connector-common.xsd" />

	<xsd:element name="command-delivery"
		type="commandDeliveryType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for the
				SiteWhere command delivery microservice.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Contains information about command delivery -->
	<xsd:complexType name="commandDeliveryType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-router" />
			<xsd:element ref="abstract-command-destination"
				minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for command routers to allow substitutionGroups -->
	<xsd:element name="abstract-command-router" abstract="true"
		type="abstractCommandRouterType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for command router elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common command router information -->
	<xsd:complexType name="abstractCommandRouterType" />

	<!-- Router that chooses destination based on device type -->
	<xsd:element name="device-type-mapping-router"
		type="deviceTypeMappingRouterType"
		substitutionGroup="abstract-command-router">
		<xsd:annotation>
			<xsd:documentation>
				Router that routes commands based on device type.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="deviceTypeMappingRouterType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandRouterType">
				<xsd:sequence>
					<xsd:element name="mapping"
						type="deviceTypeMappingRouterMappingType" minOccurs="0"
						maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								Mapping of a device type id to a destination
								id.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="defaultDestination"
					type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Allows a default destination to be set for
							device types that do not have a specific mapping.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType
		name="deviceTypeMappingRouterMappingType">
		<xsd:attribute name="deviceTypeId" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="destination" type="xsd:string"></xsd:attribute>
	</xsd:complexType>


	<!-- Router that uses Groovy script to choose command destination -->
	<xsd:element name="groovy-command-router"
		type="groovyCommandRouterType"
		substitutionGroup="abstract-command-router">
		<xsd:annotation>
			<xsd:documentation>
				Reference to a custom command router
				implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyCommandRouterType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandRouterType">
				<xsd:attribute name="scriptId" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique script id for command routing logic.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for command encoders to allow substitutionGroups -->
	<xsd:element name="abstract-command-encoder"
		abstract="true" type="abstractCommandEncoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for command encoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common command encoder information -->
	<xsd:complexType name="abstractCommandEncoderType" />

	<!-- Reference to a command encoder defined as a Spring bean -->
	<xsd:element name="command-encoder"
		type="commandEncoderReferenceType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>References a command encoder defined in an
				external bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="commandEncoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using standard SiteWhere Google Protocol Buffer naming 
		convention -->
	<xsd:element name="protobuf-command-encoder"
		type="swProtobufCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes commands based on
				standard SiteWhere
				Google Protocol Buffer naming convention.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using protbuf for system commands and Java serialization 
		for custom commands -->
	<xsd:element name="java-protobuf-hybrid-encoder"
		type="swJavaProtobufHybridEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes system commands using
				protocol buffers but encodes custom commands using serialized Java
				objects. This allows Java clients to use the commands directly
				rather than having to recompile stubs based on a proto.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJavaProtobufHybridEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using JSON serialization -->
	<xsd:element name="json-command-encoder"
		type="swJsonCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes both system and
				custom commands as JSON for simplified client use.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using a Groovy script -->
	<xsd:element name="groovy-command-encoder"
		type="swGroovyCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that hands off system and custom
				commands to a Groovy script which applies logic to encode the
				payload to a byte array.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="scriptId" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique script id for encoding command.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using a Groovy script returning a String -->
	<xsd:element name="groovy-string-command-encoder"
		type="swGroovyStringCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that hands off system and custom
				commands to a Groovy script which applies logic to encode the
				payload to a String.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType
		name="swGroovyStringCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="scriptId" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique script id for encoding command.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for parameter extractors to allow substitutionGroups -->
	<xsd:element name="abstract-parameter-extractor"
		abstract="true" type="abstractParameterExtractorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for parameter extractor elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common parameter extractor information -->
	<xsd:complexType name="abstractParameterExtractorType">
	</xsd:complexType>

	<!-- Reference to a parameter extractor defined as a Spring bean -->
	<xsd:element name="parameter-extractor"
		type="parameterExtractorReferenceType"
		substitutionGroup="abstract-parameter-extractor">
		<xsd:annotation>
			<xsd:documentation>
				Reference to a custom command destination
				implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="parameterExtractorReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractParameterExtractorType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Parameter extractor that supplies topic for MQTT command destination -->
	<xsd:element name="hardware-id-topic-extractor"
		type="hardwareIdTopicExtractorType"
		substitutionGroup="abstract-parameter-extractor">
		<xsd:annotation>
			<xsd:documentation>
				Reference to a custom command destination
				implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hardwareIdTopicExtractorType">
		<xsd:complexContent>
			<xsd:extension base="abstractParameterExtractorType">
				<xsd:attribute name="commandTopicExpr"
					type="xsd:string"></xsd:attribute>
				<xsd:attribute name="systemTopicExpr"
					type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- CoAP parameter extractor that pulls connection info from device metadata -->
	<xsd:element name="metadata-coap-parameter-extractor"
		type="coapParameterExtractorType"
		substitutionGroup="abstract-parameter-extractor">
		<xsd:annotation>
			<xsd:documentation>
				Parameter extractor that pulls connection
				information from device metadata.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="coapParameterExtractorType">
		<xsd:complexContent>
			<xsd:extension base="abstractParameterExtractorType">
				<xsd:attribute name="hostnameMetadataField"
					type="xsd:string" default="coap_hostname">
					<xsd:annotation>
						<xsd:documentation>
							Metadata field that holds hostname for CoAP
							client connection.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="portMetadataField"
					type="xsd:string" default="coap_port">
					<xsd:annotation>
						<xsd:documentation>
							Metadata field that holds port for CoAP client
							connection.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="urlMetadataField"
					type="xsd:string" default="coap_url">
					<xsd:annotation>
						<xsd:documentation>
							Metadata field that holds URL for CoAP client
							request.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="methodMetadataField"
					type="xsd:string" default="coap_method">
					<xsd:annotation>
						<xsd:documentation>
							Metadata field that holds HTTP method for CoAP
							client request.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for command destinations to allow substitutionGroups -->
	<xsd:element name="abstract-command-destination"
		abstract="true" type="abstractCommandDestinationType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for command router elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="abstractCommandDestinationType">
		<xsd:attribute name="destinationId" type="xsd:token"
			use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for command destination.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Command destination that delivers to an MQTT topic -->
	<xsd:element name="mqtt-command-destination"
		type="mqttCommandDestinationType"
		substitutionGroup="abstract-command-destination">
		<xsd:annotation>
			<xsd:documentation>
				Command destination that routes commands to an
				MQTT topic.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttCommandDestinationType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandDestinationType">
				<xsd:sequence>
					<xsd:element ref="abstract-command-encoder"
						minOccurs="0" maxOccurs="1" />
					<xsd:element ref="abstract-parameter-extractor"
						minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				<xsd:attributeGroup
					ref="cn:mqtt-broker-attributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Command destination that uses CoAP for delivery -->
	<xsd:element name="coap-command-destination"
		type="coapCommandDestinationType"
		substitutionGroup="abstract-command-destination">
		<xsd:annotation>
			<xsd:documentation>
				Command destination that routes commands via CoAP.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="coapCommandDestinationType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandDestinationType">
				<xsd:sequence>
					<xsd:element ref="abstract-command-encoder"
						minOccurs="0" maxOccurs="1" />
					<xsd:element ref="abstract-parameter-extractor"
						minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Groovy script that extracts SMS parameters -->
	<xsd:complexType
		name="swGroovySmsParameterExtractorType">
		<xsd:attribute name="scriptId" type="xsd:string"
			use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique script id for logic that extracts SMS
					parameters.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Command destination that uses Twilio for delivery -->
	<xsd:element name="twilio-command-destination"
		type="twilioCommandDestinationType"
		substitutionGroup="abstract-command-destination">
		<xsd:annotation>
			<xsd:documentation>
				Command destination that routes commands via
				Twilio APIs.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="twilioCommandDestinationType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandDestinationType">
				<xsd:sequence>
					<xsd:element ref="abstract-command-encoder"
						minOccurs="0" maxOccurs="1" />
					<xsd:element ref="abstract-parameter-extractor"
						minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="accountSid" type="xsd:string"></xsd:attribute>
				<xsd:attribute name="authToken" type="xsd:string"></xsd:attribute>
				<xsd:attribute name="fromPhoneNumber"
					type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType
		name="commandExecutionEncoderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType
		name="commandDeliveryProviderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

</xsd:schema>